CREATE DATABASE sql_snacksCREATE TABLE Drivers (
    ->     DriversID INT AUTO_INCREMENT PRIMARY KEY,  
    ->     Name VARCHAR(50),                         
    ->     Rating DECIMAL(3,2),                      
    ->     TotalRides INT                          
    -> );

CREATE TABLE Riders (RiderID INT, Name VARCHAR(50), City VARCHAR(50));
CREATE TABLE Rides (RideID INT, DriverID INT, RiderID INT, Fare INT, Rating  DECIMAL(3,2), DistanceKM INT);
CREATE TABLE Payments (PaymentID INT, RideID INT, Amount INT, PaymentMethod VARCHAR(50));
INSERT INTO Riders (RiderID, Name, City) VALUES
    -> (1, 'Alice Johnson', 'Lekki'),
    -> (2, 'Victor Martins', 'Ikeja'),
    -> (3, 'Funke Bello', 'Victoria Island'),
    -> (4, 'Tunde Adeyemi', 'Surulere'),
    -> (5, 'Grace Olamide', 'Yaba'),
    -> (6, 'Kingsley Obi', 'Lekki'),
    -> (7, 'Folasade Okoro', 'Ikeja'),
    -> (8, 'Emeka Okafor', 'Victoria Island'),
    -> (9, 'Temilade Adedeji', 'Lekki'),
    -> (10, 'Rita Durojaiye', 'Surulere'),
    -> (11, 'Chuka Nwosu', 'Yaba'),
    -> (12, 'Ayotunde Adeleke', 'Ikeja'),
    -> (13, 'Lola Abiola', 'Lekki'),
    -> (14, 'Olumide Bakare', 'Surulere'),
    -> (15, 'Chidera Okonkwo', 'Victoria Island'),
    -> (16, 'Wale Oni', 'Yaba'),
    -> (17, 'Olivia Adebayo', 'Lekki'),
    -> (18, 'Temidayo Alabi', 'Ikeja'),
    -> (19, 'Micheal Ojo', 'Victoria Island'),
    -> (20, 'Tolu Ayinde', 'Surulere'),
    -> (21, 'Grace Williams', 'Lekki'),
    -> (22, 'Olumide Ayodele', 'Ikeja'),
    -> (23, 'James Osundare', 'Yaba'),
    -> (24, 'Chika Okafor', 'Surulere'),
    -> (25, 'Sandra Ogunleye', 'Victoria Island');

INSERT INTO Drivers (Name, Rating, TotalRides) VALUES
    -> ('John Doe', 4.5, 120),
    -> ('Jane Smith', 4.2, 90),
    -> ('James Bond', 4.7, 150),
    -> ('Samantha James', 4.3, 80),
    -> ('Michael Brown', 4.0, 60),
    -> ('Nina Williams', 4.6, 200),
    -> ('Chris Johnson', 4.1, 110),
    -> ('Sarah Davis', 4.8, 100),
    -> ('David Lee', 3.9, 70),
    -> ('Emma Green', 4.4, 130),
    -> ('Olumide Adebayo', 4.7, 150),
    -> ('Grace Okafor', 4.3, 140),
    -> ('Julius Adedeji', 4.6, 175),
    -> ('Tolu Olowolagba', 4.2, 105),
    -> ('Fola Akinwunmi', 4.5, 125),
    -> ('Oluwaseun Bello', 4.1, 115),
    -> ('Kayode Ogunleye', 4.8, 180),
    -> ('Chinonso Ifeanyichukwu', 3.8, 85),
    -> ('Oluwafunmilayo Bello', 4.3, 140),
    -> ('Adeola Akin', 4.6, 160);

 INSERT INTO Rides (RideID, DriverID, RiderID, Fare, Rating, DistanceKM) VALUES
    -> (1, 1, 1, 3000, 4.5, 10),
    -> (2, 2, 2, 2500, 4.2, 8),
    -> (3, 3, 3, 4500, 4.7, 15),
    -> (4, 4, 4, 3500, 4.3, 12),
    -> (5, 5, 5, 2000, 4.0, 7),
    -> (6, 6, 6, 4000, 4.6, 20),
    -> (7, 7, 7, 2800, 4.1, 9),
    -> (8, 8, 8, 5000, 4.8, 18),
    -> (9, 9, 9, 2200, 3.9, 6),
    -> (10, 10, 10, 3700, 4.4, 14),
    -> (11, 11, 11, 3900, 4.7, 16),
    -> (12, 12, 12, 3600, 4.3, 11),
    -> (13, 13, 13, 4200, 4.6, 17),
    -> (14, 14, 14, 3300, 4.2, 13),
    -> (15, 15, 15, 3800, 4.5, 19),
    -> (16, 16, 16, 2500, 4.1, 8),
    -> (17, 17, 17, 4800, 4.8, 22),
    -> (18, 18, 18, 3100, 3.8, 10),
    -> (19, 19, 19, 3300, 4.3, 14),
    -> (20, 20, 20, 4600, 4.6, 20),
    -> (21, 1, 21, 2900, 4.4, 11),
    -> (22, 2, 22, 3200, 4.1, 12),
    -> (23, 3, 23, 3400, 4.7, 13),
    -> (24, 4, 24, 3100, 4.3, 9),
    -> (25, 5, 25, 3600, 4.2, 15),
    -> (26, 6, 1, 2800, 4.6, 12),
    -> (27, 7, 2, 3500, 4.1, 16),
    -> (28, 8, 3, 5000, 4.8, 18),
    -> (29, 9, 4, 2300, 3.9, 7),
    -> (30, 10, 5, 3800, 4.4, 14),
    -> (31, 11, 6, 4000, 4.7, 20),
    -> (32, 12, 7, 3300, 4.3, 13),
    -> (33, 13, 8, 4100, 4.6, 17),
    -> (34, 14, 9, 3100, 4.2, 11),
    -> (35, 15, 10, 4200, 4.5, 19),
    -> (36, 16, 11, 2900, 4.1, 12),
    -> (37, 17, 12, 4700, 4.8, 21),
    -> (38, 18, 13, 3300, 3.8, 10),
    -> (39, 19, 14, 3200, 4.3, 14),
    -> (40, 20, 15, 4500, 4.6, 20),
    -> (41, 1, 16, 3000, 4.5, 12),
    -> (42, 2, 17, 2500, 4.2, 9),
    -> (43, 3, 18, 4500, 4.7, 15),
    -> (44, 4, 19, 3500, 4.3, 13),
    -> (45, 5, 20, 2000, 4.0, 7),
    -> (46, 6, 21, 4000, 4.6, 20),
    -> (47, 7, 22, 2800, 4.1, 8),
    -> (48, 8, 23, 5000, 4.8, 18),
    -> (49, 9, 24, 2200, 3.9, 6),
    -> (50, 10, 25, 3700, 4.4, 14);

INSERT INTO Payments (PaymentID, RideID, Amount, PaymentMethod) VALUES
    -> (1, 1, 3000, 'Card'),
    -> (2, 2, 2500, 'Cash'),
    -> (3, 3, 4500, 'Card'),
    -> (4, 4, 3500, 'Mobile Money'),
    -> (5, 5, 2000, 'Cash'),
    -> (6, 6, 4000, 'Card'),
    -> (7, 7, 2800, 'Mobile Money'),
    -> (8, 8, 5000, 'Card'),
    -> (9, 9, 2200, 'Cash'),
    -> (10, 10, 3700, 'Mobile Money'),
    -> (11, 11, 3900, 'Card'),
    -> (12, 12, 3600, 'Cash'),
    -> (13, 13, 4200, 'Mobile Money'),
    -> (14, 14, 3300, 'Card'),
    -> (15, 15, 3800, 'Mobile Money'),
    -> (16, 16, 2500, 'Cash'),
    -> (17, 17, 4800, 'Card'),
    -> (18, 18, 3100, 'Cash'),
    -> (19, 19, 3300, 'Mobile Money'),
    -> (20, 20, 4600, 'Card'),
    -> (21, 21, 2900, 'Cash'),
    -> (22, 22, 3200, 'Card'),
    -> (23, 23, 3400, 'Mobile Money'),
    -> (24, 24, 3100, 'Cash'),
    -> (25, 25, 3600, 'Card'),
    -> (26, 26, 2800, 'Mobile Money'),
    -> (27, 27, 3500, 'Card'),
    -> (28, 28, 5000, 'Cash'),
    -> (29, 29, 2300, 'Mobile Money'),
    -> (30, 30, 3800, 'Card'),
    -> (31, 31, 4000, 'Cash'),
    -> (32, 32, 3300, 'Mobile Money'),
    -> (33, 33, 4100, 'Card'),
    -> (34, 34, 3100, 'Cash'),
    -> (35, 35, 4200, 'Mobile Money'),
    -> (36, 36, 2900, 'Card'),
    -> (37, 37, 4700, 'Cash'),
    -> (38, 38, 3300, 'Mobile Money'),
    -> (39, 39, 3200, 'Card'),
    -> (40, 40, 4500, 'Cash'),
    -> (41, 41, 3000, 'Card'),
    -> (42, 42, 2500, 'Cash'),
    -> (43, 43, 4500, 'Mobile Money'),
    -> (44, 44, 3500, 'Card'),
    -> (45, 45, 2000, 'Cash'),
    -> (46, 46, 4000, 'Card'),
    -> (47, 47, 2800, 'Mobile Money'),
    -> (48, 48, 5000, 'Card'),
    -> (49, 49, 2200, 'Cash'),
    -> (50, 50, 3700, 'Mobile Money');

CREATE TABLE Highest_rated_drivers(DriverId INT, Name VARCHAR(50), Rating DECIMAL(3,2), TotalRides INT);

INSERT INTO Highest_rated_drivers(DriverId, Name, Rating, TotalRides) SELECT DriversID, Name, Rating, TotalRides FROM Drivers
ORDER BY Rating DESC LIMIT 5;

2. CREATE TABLE More_Than_Five_Rides AS SELECT RiderID FROM Rides GROUP BY RiderID HAVING COUNT(*) > 5;

3. CREATE VIEW total_Revenue AS SELECT SUM(Amount) AS total_Amount FROM Payments;
	SELECT * FROM total_Revenue;

4. CREATE TABLE Area_with_most_Ride AS
    -> SELECT 
    -> City,
    -> COUNT(*) AS RideCount
    -> FROM Riders
    -> GROUP BY City
    -> ORDER BY RideCount DESC
    -> LIMIT 1;

5. CREATE TABLE Driver_Name_Revenue(DriverID INT, Name VARCHAR(50), Revenue INT);
	INSERT INTO Driver_Name_Revenue(DriverID, Name, Revenue) SELECT d.DriversId, d.Name, r.Fare FROM Drivers d JOIN Rides r
ON d.DriversId = r.DriverID;
	CREATE TABLE Drivers_Total_Revenue AS SELECT DriverID, Name, SUM(Revenue) AS Total_Revenue FROM Driver_Name_Revenue GROUP BY DriverID, Name;
	CREATE TABLE Highest_Revenue_Driver(Driver INT, Name VARCHAR(50), Total Revenue INT);
	 INSERT INTO Highest_Revenue_Driver SELECT DriverID, Name, Total_revenue FROM Drivers_Total_Revenue WHERE Total_Revenue = (SELE
CT MAX(Total_Revenue) FROM Drivers_Total_Revenue);

6. CREATE TABLE Rides_Outliers AS WITH Fare_Stats AS (SELECT AVG(Fare) AS Average_Fare, AVG(Fare) * 1.5 AS FiftyPercentAboveAvg, AVG(Fare) * 0.5 AS FiftyPercentBelowAvg  FROM Rides) SELECT r.RideID, r.Fare, ROUND(fs.Average_Fare, 2) AS AverageFare, CASE WHEN  r.Fare > fs.FiftyPercentAboveAvg THEN 'Greater' WHEN r.Fare > fs.FiftyPercentBelowAvg THEN 'Lesser' END AS Status FROM Rides r CROSS JOIN Fare_Stats fs WHERE r.Fare > fs.FiftyPercentAboveAvg OR r.Fare < fs.FiftyPercentBelowAvg;

7. CREATE TABLE Low_Rate AS
    -> SELECT
    ->  r.RideID,
    -> rd.Name,
    -> r.Rating AS Average_Rating
    -> FROM Rides r
    -> JOIN Riders rd ON r.RiderID = rd.RiderID
    -> WHERE r.Rating < 3;

